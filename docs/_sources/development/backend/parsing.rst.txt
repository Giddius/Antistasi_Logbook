Parsing
=======

.. card::

   Each Log-file goes through up to 4 different kinds of parsing steps:

      * :ref:`Meta-Data Parsing`
      * :ref:`Header-Text Parsing`
      * :ref:`Startup-Entries Parsing`
      * :ref:`Entries Parsing`
         * :ref:`Record Processing`

Meta-Data Parsing
++++++++++++++++++

.. card::




   To parse the meda-data, the whole file has to be available.
   The Meta-Data parser goes through the file in chunks and tries to find each attribute via regex.

   It takes a 'LogFile'-Instance as input and copies all Meta-Data attributes that the 'LogFile' already has to itself.
   This means it only searches for those attributes that are missing on the 'LogFile'.

   .. card:: Meta-Data attributes
      :shadow: md

      * .. dropdown:: Game Map

         This has to be the arma internal used name (no spaces, can also differ from the display name like `virolahti` -> `vt7`)

         .. tab-set::

            .. tab-item:: Example

               .. code::

                  2022/11/13, 11:52:47  Mission world: cam_lao_nam

            .. tab-item:: Regex

               .. button-link:: https://regex101.com/r/smMRra/1
                  :color: primary
                  :shadow:

                  üîóexplanation with regex101.com



               .. code:: python

                  re.compile(r"\sMission world\:\s*(?P<game_map>.*)")


      * .. dropdown:: Version

         A :term:`semi-semvar-version` is needed to be parseable


         .. tab-set::

            .. tab-item:: Example

               .. code::

                  2022/11/13, 11:53:11 2022-11-13 19:53:11:377 | Antistasi | Info | File: A3A_fnc_initServer | Server version: 2.6.1.872dbb3

            .. tab-item:: Regex

               .. button-link:: https://regex101.com/r/5qFKRc/1
                  :color: primary
                  :shadow:

                  üîóexplanation with regex101.com


               .. code:: python

                  re.compile(r"\s*((MP server version)|(Server version)):\s*(?P<version>.*?)(?=\s|$)")



      * .. dropdown:: Mods

         It looks for the special delimited block of mods that arma puts in the logs by default and then processes each line as a possible mod.


         .. tab-set::

            .. tab-item:: Example

               .. include:: /_data/mod_example_text.txt


            .. tab-item:: Regex

               .. button-link:: https://regex101.com/r/G7BaoJ/1
                  :color: primary
                  :shadow:

                  üîóexplanation with regex101.com


               .. include:: /_data/mod_regex_text.txt





      * .. dropdown::  Campaign ID

         Is only allowed to consist of digits. Currently this attribute also sets if the Log-file is from a new Campaign or loaded and continued from a saved Campaign.

         .. tab-set::

            .. tab-item:: Example

               .. code::

                  2022/07/04, 06:11:28 2022-07-04 13:11:28:248 | Antistasi | Info | File: A3A_fnc_initServer | Loading last campaign ID 93344

            .. tab-item:: Regex

               .. button-link:: https://regex101.com/r/8P312m/1
                  :color: primary
                  :shadow:

                  üîóexplanation with regex101.com


               .. code:: python

                  re.compile(r"((?P<text_loading>Loading last campaign ID)|(?P<text_creating>Creating new campaign with ID))\s*(?P<campaign_id>\d+)")


      * .. dropdown:: UTC offset of the log-file


         .. DANGER::

            if this attribute is not found, the log-file is marked as `unparsable` and will not be parsed any further.


         It does this by looking for the first log-entry it can find, that contains the full local datetime **AND** the full UTC datetime and calculate the offset from those two.

         .. tab-set::

            .. tab-item:: Example

               .. code::

                  2022/11/13, 11:53:11 2022-11-13 19:53:11:377 | Antistasi | Info | File: A3A_fnc_initServer | Server init started

            .. tab-item:: Regex


               .. button-link:: https://regex101.com/r/h51YxR/1
                  :color: primary
                  :shadow:

                  üîóexplanation with regex101.com

               .. code:: python

                  re.compile(r"""^
                                 (?P<local_year>\d{4})
                                 /
                                 (?P<local_month>[01]\d)
                                 /
                                 (?P<local_day>[0-3]\d)
                                 \,\s+
                                 (?P<local_hour>[0-2]\d)
                                 \:
                                 (?P<local_minute>[0-6]\d)
                                 \:
                                 (?P<local_second>[0-6]\d)
                                 \s
                                 (?P<year>\d{4})
                                 \-
                                 (?P<month>[01]\d)
                                 \-
                                 (?P<day>[0-3]\d)
                                 \s
                                 (?P<hour>[0-2]\d)
                                 \:
                                 (?P<minute>[0-6]\d)
                                 \:
                                 (?P<second>[0-6]\d)
                                 \:
                                 (?P<microsecond>\d{3})
                                 (?=\s)""",
                                 re.VERBOSE | re.MULTILINE)



   To not use too much memory when reading large log-files and to not accidentally cut one of the search texts in half with chunking, it always keeps 2 chunks and processes the combined text of both.
   When reading a new chunk, the older one of the 2 stored gets discarded and the other one gets combined with the new one to create the new text to search.

   .. figure:: /_images/PairedReader_diagram.png
      :scale: 25 %
      :align: center

      The Mechanism of how the files are read.


   It will continue reading chunks and searching until one of the following conditions is fulfilled:

   * ‚òê end of file reached
   * ‚òê all meta-attributes found
   * ‚òê it has read more than the set limit (in bytes), as all attributes should be able to be found (if they exist) in the beginning of a log-file.


Header-Text Parsing
++++++++++++++++++++

.. card::



Startup-Entries Parsing
++++++++++++++++++++++++

.. card::



Entries Parsing
++++++++++++++++

.. card::


Record Processing
------------------


   .. card::


